// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motored.BD.Data;

#nullable disable

namespace Motored.BD.Migrations
{
    [DbContext(typeof(BDContext))]
    partial class BDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Motored.BD.Data.Entidades.Motocicleta", b =>
                {
                    b.Property<int>("IdMotocicleta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMotocicleta"));

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<string>("Aseguradora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("IdMotocicleta");

                    b.HasIndex("UsuarioId");

                    b.ToTable("motocicletas");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.Opinion", b =>
                {
                    b.Property<int>("IdOpinion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOpinion"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estrellas")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTaller")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("tallerIdtaller")
                        .HasColumnType("int");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("IdOpinion");

                    b.HasIndex("tallerIdtaller");

                    b.HasIndex("usuarioId");

                    b.ToTable("opiniones");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.ReporteOpinion", b =>
                {
                    b.Property<int>("IdReporte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReporte"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estrellas")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOpinion")
                        .HasColumnType("int");

                    b.Property<int>("IdTaller")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarioRC")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpinionIdOpinion")
                        .HasColumnType("int");

                    b.Property<int>("TallerIdtaller")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("sancion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReporte");

                    b.HasIndex("OpinionIdOpinion");

                    b.HasIndex("TallerIdtaller");

                    b.HasIndex("UsuarioId");

                    b.ToTable("reportes");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.Taller", b =>
                {
                    b.Property<int>("Idtaller")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtaller"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Horarios")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("LinksMaps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Numero")
                        .HasColumnType("float");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reseñas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Idtaller");

                    b.HasIndex("usuarioId");

                    b.ToTable("talleres");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.TallerTop", b =>
                {
                    b.Property<int>("idRanking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRanking"));

                    b.Property<int>("IdTaller")
                        .HasColumnType("int");

                    b.Property<string>("LinkTaller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TallerIdtaller")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("idRanking");

                    b.HasIndex("TallerIdtaller");

                    b.ToTable("talleresTop");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmarContraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DNI")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.Motocicleta", b =>
                {
                    b.HasOne("Motored.BD.Data.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.Opinion", b =>
                {
                    b.HasOne("Motored.BD.Data.Entidades.Taller", "taller")
                        .WithMany()
                        .HasForeignKey("tallerIdtaller")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motored.BD.Data.Entidades.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taller");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.ReporteOpinion", b =>
                {
                    b.HasOne("Motored.BD.Data.Entidades.Opinion", "Opinion")
                        .WithMany()
                        .HasForeignKey("OpinionIdOpinion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motored.BD.Data.Entidades.Taller", "Taller")
                        .WithMany()
                        .HasForeignKey("TallerIdtaller")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motored.BD.Data.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opinion");

                    b.Navigation("Taller");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.Taller", b =>
                {
                    b.HasOne("Motored.BD.Data.Entidades.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Motored.BD.Data.Entidades.TallerTop", b =>
                {
                    b.HasOne("Motored.BD.Data.Entidades.Taller", "Taller")
                        .WithMany()
                        .HasForeignKey("TallerIdtaller")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Taller");
                });
#pragma warning restore 612, 618
        }
    }
}
